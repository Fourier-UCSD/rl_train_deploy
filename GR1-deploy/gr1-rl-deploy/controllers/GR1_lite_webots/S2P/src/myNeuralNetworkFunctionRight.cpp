//
// File: myNeuralNetworkFunctionRight.cpp
//
// MATLAB Coder version            : 5.2
// C/C++ source code generated on  : 26-Sep-2023 17:00:54
//

// Include Files
#include "myNeuralNetworkFunctionRight.h"
#include <cmath>

// Function Definitions
//
// MYNEURALNETWORKFUNCTION neural network simulation function.
//
//  Auto-generated by MATLAB, 26-Sep-2023 16:50:50.
//
//  [y1] = myNeuralNetworkFunction(x1) takes these arguments:
//    x = Qx2 matrix, input #1
//  and returns:
//    y = Qx2 matrix, output #1
//  where Q is the number of samples.
//
// Arguments    : const double x1[2]
//                double b_y1[2]
// Return Type  : void
//
void myNeuralNetworkFunctionRight(const double x1[2], double b_y1[2])
{
  static const double b_a[40]{
      5.8015802628833963,  5.5325401941629586,   -3.1505991231686941,
      -1.6915759867734201, -0.66507918822980661, -0.67238047065067741,
      -1.6663152753691004, -1.8304042900954436,  -0.864526210917737,
      0.538361899407137,   -0.77791921527080321, 1.2916881014140098,
      -3.3447817087599736, 1.7969729102051304,   -3.4977469290567171,
      -3.613223353210175,  3.5411609071599148,   -2.7773046317734376,
      3.8705604825857307,  -2.0056279141110647,  1.2754353671617,
      1.140460934393515,   0.13051461255442884,  -1.4773611913026237,
      -2.0003509287100094, -1.9455181279387057,  3.6493474874193628,
      0.66617788014938006, 0.48943252027258788,  0.46615879246825032,
      1.5161007739518868,  -0.54082471251291553, -4.000751452938653,
      0.45733541304994479, -1.5828175080949114,  -1.6496482114185858,
      2.04459900329226,    -3.8725970521498554,  -3.2058205465663394,
      -3.6934113164268672};
  static const double c_a[40]{
      -0.52055268433455837,  -0.013064426993101631,   0.66391725663750567,
      0.019889562027824745,  0.8069642301199792,      0.13739004104960595,
      -0.025791917069473709, -0.18778517593056288,    -0.41929815057738729,
      1.0149687569993062,    0.46353307812404443,     -1.1364794900870865,
      0.015683098719050922,  0.0077122779793951284,   0.73268754746115372,
      0.13786361779282369,   -7.2012919550334438,     -0.91596425278923554,
      -1.9496074237077998,   0.92922246644371409,     0.45437945232945731,
      0.13841680375736659,   3.1938362166761407,      -0.30901667502786556,
      0.0016089429365942402, -0.00033021148932226209, -0.32109445292991867,
      0.1154325220587684,    1.0674143383026604,      -0.37680019193500852,
      -0.89626271414466752,  0.31228596323969338,     -0.15727994506526946,
      0.077378763634186221,  0.55143815685033315,     -0.42124328495441182,
      1.0468702194073807,    -1.1538345882850085,     -0.548632191810631,
      0.54129620778662479};
  static const double a[20]{
      -6.1083164296326329,   -5.8301729310806731,  3.4229839770536832,
      3.0223018402152344,    1.4640724379919925,   1.4469175835095069,
      0.9314251848390066,    1.117096416081601,    0.92261500183104561,
      -0.037504437646810745, -0.14710242985866709, 0.97160335969268163,
      -1.8245064590468378,   0.88123673337471642,  -2.9476764717238542,
      -3.0327050448250619,   4.5034889371670168,   -6.4125243423026648,
      4.3845371782546385,    -5.7719103289008293};
  double b[20];
  double xp1[2];
  double d;
  double d1;
  int k;
  //  ===== NEURAL NETWORK CONSTANTS =====
  //  Input 1
  //  Layer 1
  //  Layer 2
  //  Output 1
  //  ===== SIMULATION ========
  //  Dimensions
  //  samples
  //  Input 1
  //  ===== MODULE FUNCTIONS ========
  //  Map Minimum and Maximum Input Processing Function
  //  Layer 1
  //  Sigmoid Symmetric Transfer Function
  //  Layer 2
  d = (x1[0] - -1.2258) * 1.01620852598953 + -1.0;
  d1 = (x1[1] - -1.2259) * 1.01565634251994 + -1.0;
  for (k = 0; k < 20; k++) {
    b[k] = 2.0 / (std::exp(-2.0 * (a[k] + (b_a[k] * d + b_a[k + 20] * d1))) +
                  1.0) -
           1.0;
  }
  xp1[0] = 1.06957653882809;
  xp1[1] = 2.0739829450581366;
  //  Output 1
  //  Map Minimum and Maximum Output Reverse-Processing Function
  for (k = 0; k < 2; k++) {
    d = 0.0;
    for (int i{0}; i < 20; i++) {
      d += c_a[k + (i << 1)] * b[i];
    }
    b_y1[k] =
        ((xp1[k] + d) - -1.0) /
            (-1.01860676223578 * static_cast<double>(k) + 2.29184332958999) +
        (-0.61086999999999991 * static_cast<double>(k) + -0.43633);
  }
}

//
// File trailer for myNeuralNetworkFunctionRight.cpp
//
// [EOF]
//
