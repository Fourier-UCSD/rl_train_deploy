//
// File: myNeuralNetworkFunction.cpp
//
// MATLAB Coder version            : 5.2
// C/C++ source code generated on  : 26-Sep-2023 15:34:54
//

// Include Files
#include "myNeuralNetworkFunction.h"
#include <cmath>

// Function Definitions
//
// MYNEURALNETWORKFUNCTION neural network simulation function.
//
//  Auto-generated by MATLAB, 26-Sep-2023 15:29:59.
//
//  [y1] = myNeuralNetworkFunction(x1) takes these arguments:
//    x = Qx2 matrix, input #1
//  and returns:
//    y = Qx2 matrix, output #1
//  where Q is the number of samples.
//
// Arguments    : const double x1[2]
//                double b_y1[2]
// Return Type  : void
//
void myNeuralNetworkFunction(const double x1[2], double b_y1[2])
{
  static const double b_a[40]{
      4.1611978856994787,  4.28741375744369,     -3.2329482724835192,
      3.2295728584301391,  3.365863656368993,    -3.4259786092261972,
      0.303635264829151,   1.0357905491413777,   1.5231961933374518,
      1.0498917678443165,  -0.58362691644491116, 1.7484159415008411,
      2.1113609630711081,  1.0747125999655283,   3.5508508673796273,
      -5.6997289141674745, -0.36377691922178579, 3.8197442841339533,
      2.9072686042308167,  4.4845259887083584,   3.0252680728927888,
      -4.4380907596964221, 3.4572240063471118,   2.2951870935425682,
      2.1190189047177417,  1.9493717780635309,   3.61377945932344,
      -1.9231356367313859, 1.1284908864145931,   -1.4455242366115082,
      0.2762312104770232,  -2.2592374860789031,  -0.9919894744965122,
      -2.1345868264164469, -4.1318070917760625,  1.3700001439411873,
      1.9476927947853835,  -0.47108463478070545, 5.9982905586314432,
      -4.4738324363998334};
  static const double c_a[40]{
      -0.029794316585132038,  0.01074737121138849,     -0.058219617245258738,
      1.320440270982024,      -0.812445434526058,      0.85385039357651027,
      -0.019969054245140574,  0.0079475300319278418,   -0.0056757536194365658,
      0.0021853594840013433,  -0.022823271077105488,   -0.011099589162747449,
      -0.14441661402650102,   0.0055976007721327955,   1.9685634137657466,
      -0.4000332665044134,    -0.02085288266606752,    0.00960177457386128,
      0.63899221309889553,    -0.67205744539590417,    -1.8269641153308076,
      -2.6893496524019556,    0.36562432032970271,     -0.24121790972856549,
      0.261320393324544,      0.064926999361325163,    -1.0585982747652551,
      0.16535903667133425,    0.21883920552105279,     -0.10727643303014929,
      0.29247156508798017,    0.012678685702453714,    0.4383921027264408,
      -0.069479006307976557,  1.2393962580759492,      0.040974566668789285,
      0.00022042510584849409, -0.00010354397897001635, 0.47070224310908043,
      0.098821292850216055};
  static const double a[20]{
      -5.9760158537189847,  -4.1249691705803508,  3.2066607341023725,
      -3.5720327546704826,  -2.4546116983536455,  1.8517622251157368,
      4.404202269458251,    -0.87384290494696482, -0.85240856674642762,
      0.065454587653003743, 0.058225544026714843, 1.1254504621582928,
      1.3112153092199585,   -0.86300243857635028, 2.7755539240786171,
      -5.4439882066443595,  -2.500743964487075,   4.6395292436252324,
      3.3321784177238882,   6.1120838188927777};
  double b[20];
  double xp1[2];
  double d;
  double d1;
  int k;
  //  ===== NEURAL NETWORK CONSTANTS =====
  //  Input 1
  //  Layer 1
  //  Layer 2
  //  Output 1
  //  ===== SIMULATION ========
  //  Dimensions
  //  samples
  //  Input 1
  //  ===== MODULE FUNCTIONS ========
  //  Map Minimum and Maximum Input Processing Function
  //  Layer 1
  //  Sigmoid Symmetric Transfer Function
  //  Layer 2
  d = (x1[0] - -1.2256) * 1.0158007811508 + -1.0;
  d1 = (x1[1] - -1.2261) * 1.01606397138764 + -1.0;
  for (k = 0; k < 20; k++) {
    b[k] = 2.0 / (std::exp(-2.0 * (a[k] + (b_a[k] * d + b_a[k + 20] * d1))) +
                  1.0) -
           1.0;
  }
  xp1[0] = -0.1639267685074135;
  xp1[1] = 0.61135792158094282;
  //  Output 1
  //  Map Minimum and Maximum Output Reverse-Processing Function
  for (k = 0; k < 2; k++) {
    d = 0.0;
    for (int i{0}; i < 20; i++) {
      d += c_a[k + (i << 1)] * b[i];
    }
    b_y1[k] =
        ((xp1[k] + d) - -1.0) /
            (-1.01860676223578 * static_cast<double>(k) + 2.29184332958999) +
        (-0.61086999999999991 * static_cast<double>(k) + -0.43633);
  }
}

//
// File trailer for myNeuralNetworkFunction.cpp
//
// [EOF]
//
